import base64
import os
import shutil
import atexit
from random import randint
from string import ascii_letters, digits

ASCII_LETTERS_DIGITS = ascii_letters + digits + "_"




class ResourceManager:
    """
    A class that provides utility methods for managing resources.

    Methods:
    - temporary_directory(root=None) -> str:
        Creates a temporary directory and returns its path.
        If `root` is provided, the temporary directory will be created within that directory,
        otherwise, it will be created in the current working directory.

    - __delete_temporary(directory: str):
        Deletes the specified temporary directory and its contents.

    - __only_images(files) -> list[str]:
        Filters the given list of files and returns a list containing only image files.

    - __images_to_temporary_directory(resources: list) -> Tuple[str, List[str]]:
        Copies the given list of resources (image files) to a temporary directory and returns
        the path to the temporary directory and a list of the copied files.

    - encode_image(image_path) -> bytes:
        Encodes the image at the specified path and returns the base64-encoded image data.

    - decode_image(image_data) -> bytes:
        Decodes the base64-encoded image data and returns the original image data.

    - __temporary_files_to_b64_objects(files, temp_files) -> List[Tuple[str, bytes, bytes]]:
        Reads the temporary files, encodes their contents as base64, decodes them back to bytes,
        and returns a list of tuples containing the original file paths, base64-encoded data, and decoded data.

    - pythonic_name(string: str) -> str:
        Converts the given string into a valid Python variable name by replacing spaces with underscores,
        adding an underscore at the beginning if necessary, and removing any invalid characters.

    - inject_images_into_file(filename: str, directory: str = None, output_filename: str = "output_injected_file.py"):
        Injects the contents of an image file generated by `images_to_file` into the specified file,
        creating a new file with the injected contents as the output.

    - images_to_file(directory: str = None, filename: str = "images.py") -> str:
        Generates a Python file containing base64-encoded versions of all image files in the specified directory.
        If `directory` is not provided, the current working directory is used.
        The generated file includes variable assignments for each image file's encoded and decoded data.
        Returns the path to the generated file.
    """
    
    @staticmethod
    def temporary_directory(root=None) -> str:
        if root == None:
            root = os.getcwd()
        
        length = len(ascii_letters) - 1
        name = ""
        for i in range(20):
            letter_index = randint(0, length)
            name+=ascii_letters[letter_index]
        atexit.register(ResourceManager.__delete_temporary, args=(name, ))
        temp_path = os.path.join(root, name)
        os.mkdir(temp_path)
        return temp_path
        
        
    @staticmethod
    def __delete_temporary(args):
        shutil.rmtree(args[0])
    
    @staticmethod
    def __only_images(files) -> list[str]:
        retv = []
        image_extensions = [".jpg", ".gif", ".png"]
        
        for file in files:
            ext = os.path.splitext(file)[1]
            if ext in image_extensions:
                retv.append(file)
        return retv
        
    
    @staticmethod
    def __images_to_temporary_directory(resources: list):
        temp_dir = ResourceManager.temporary_directory()
        files = []
        for target in resources:
            basename = os.path.basename(target)
            tempfile = os.path.join(temp_dir, basename)
            shutil.copy(src=target, dst=tempfile)
            files.append(tempfile)
        return temp_dir, files
    
    @staticmethod
    def encode_image(image_path):
        return base64.b64encode(image_path)
    
    @staticmethod
    def decode_image(image_data):
        return base64.b64decode(image_data)
    
    @staticmethod
    def __temporary_files_to_b64_objects(files, temp_files):
        b64_objects = []
        for index, file in enumerate(temp_files):
            with open(file, "rb") as rfile:
                data = rfile.read()
                encoded = ResourceManager.encode_image(data)
                decoded = ResourceManager.decode_image(encoded)
                b64_objects.append((files[index], encoded, decoded))
        return b64_objects
    
    @staticmethod
    def pythonic_name(string: str):
        retv = ""
        string.replace(" ", "_")
        if string[0] not in ascii_letters:
            string = "_" + string
        for character in string:
            good_to_go = False
            for legit_char in ASCII_LETTERS_DIGITS:
                if character == legit_char:
                    good_to_go = True
                    break
                
            if good_to_go == True:
                retv+=character
        return retv



    @staticmethod
    def inject_images_into_file(filename: str, directory:str = None, output_filename: str ="output_injected_file.py"):
        if directory == None:
            directory = os.getcwd()
            
        filen = ResourceManager.images_to_file(directory=directory, filename="___TEM_P_F_ILE__.py")
        with open(filen, "r") as rfile:
            data = rfile.read()
        with open(filename, "r") as Rfile:
            data2 = Rfile.read()
        with open(output_filename, "w") as wfile:
            wfile.write(data)
            wfile.write(data2)
        
    @staticmethod
    def images_to_file(directory: str=None, filename: str="__images.py") -> str:

        if directory == None:
            directory = os.getcwd()
        
    
        targets          = [os.path.join(directory, x) for x in os.listdir(directory)]
        resources        = ResourceManager.__only_images(targets)
        temp_dir, files  = ResourceManager.__images_to_temporary_directory(resources)
        b64_objects      = ResourceManager.__temporary_files_to_b64_objects(resources, files)
        filename_path    = os.path.join(directory, filename)
        encoded_names    = []
        decoded_names    = []
        
        
        with open(filename_path, "w") as wfile:
            for b64obj in b64_objects:
                fn = b64obj[0]
                bn = os.path.basename(fn)
                xn = os.path.splitext(bn)[0]
                name = ResourceManager.pythonic_name(xn)
                encoded_name = name+"_encoded"
                decoded_name = name+"_decoded"
                encoded_names.append(encoded_name)
                encoded_write_string = encoded_name + " = " + 'b"' + b64obj[1].decode() + '"' + "\n"
                wfile.write(encoded_write_string)
        
        return filename

if __name__ == '__main__':
    ResourceManager.images_to_file(filename="images.py")
    
    